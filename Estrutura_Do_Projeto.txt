PROJETO_C – Estrutura do Projeto:

TRABALHO_ECOENG/
│
├── .vscode/                      # Configurações locais do VS Code
│
├── Arquivos_csv/                 # Base de dados do sistema (arquivos persistentes)
│   ├── equipes.csv               # Dados das equipes cadastradas
│   └── users.csv                 # Dados dos usuários (login/senha)
│
├── bin/                          # Executáveis gerados pela compilação (make)
│
├── Cadastro/                     # Módulos de cadastro do sistema
│   ├── Cadastro_Equipes/
│   │   ├── Cadastro_Equipes.c
│   │   └── Cadastro_Equipes.h
│   │
│   └── Cadastro_user/
│       ├── User.c
│       └── User.h
│
├── Desafio_robo_Pontuacao/       # Módulo responsável por pontuações e desafios
│   ├── Pontuacao.c
│   └── Pontuacao.h
│
├── Funcoes_cvs/                  # Funções genéricas para manipulação de arquivos CSV
│   ├── Dados.c
│   └── Dados.h
│
├── lib/                          # (Reservado) possíveis bibliotecas externas ou estáticas
│
├── Menus/                        # Interface textual e interação com o usuário
│   ├── Menu_Avaliadores/
│   ├── Menu_Equipes/
│   ├── Menu_principal/
│   └── Menu_professores/
│
├── obj/                          # Objetos de compilação (.o)
│
├── Utilidades/                   # Funções auxiliares e ferramentas extras
│   ├── FILES/
│   └── Rsult/
│
├── .gitignore                    # Regras para ignorar arquivos desnecessários no Git
│
├── Estrutura_Do_Projeto.txt      # Documento explicando a organização dos módulos
│
├── main.c                        # Função principal do sistema (ponto de entrada)
│
└── makefile                      # Script de build automatizado


Descrição da Estrutura:
1. src/
Contém todo o código-fonte do projeto, organizado por módulos funcionais:
main.c: ponto de entrada do programa
cadastro/: módulo geral de cadastros
cadastro_equipes/: funções específicas para cadastro de equipes
cadastro_user/: funções para cadastro de usuários
desafio_robo/: sistema de pontuação do desafio do robô
funcoes_csv/: manipulação de arquivos CSV e dados
menus/: todos os menus do sistema (principal, avaliadores, equipes, profissões)
utilidades/: funções auxiliares e utilitárias
resultados/: geração e exibição de resultados

2. Arquivos .h e .c
.h (headers): declarações de funções, structs, constantes e includes
.c: implementações das funções declaradas nos headers

3. dados/
Contém arquivos CSV para armazenamento persistente:
equipes.csv: dados das equipes cadastradas
users.csv: dados dos usuários do sistema

4. build/
Diretório para arquivos objeto (.o) gerados durante a compilação, mantendo a mesma estrutura hierárquica do src/

5. lib/
Diretório para bibliotecas externas necessárias ao projeto

6. Makefile
Automatiza o processo de compilação:
Compila arquivos .c em .o no diretório build/
Gera o executável final
Comandos: make (compilar), make clean (limpar arquivos temporários)

Benefícios desta Estrutura:
Organização Modular: Cada funcionalidade em seu próprio diretório
Manutenibilidade: Fácil localização e modificação de código
Escalabilidade: Simples adicionar novos módulos
Separação Clara: Cabeçalhos e implementações bem organizados
Compilação Eficiente: Makefile otimiza o processo de build
Colaboração: Múltiplos desenvolvedores podem trabalhar sem conflitos




